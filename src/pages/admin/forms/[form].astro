---
import { apiConfig } from "../../../db/routes";
import { getFieldDefinitions } from "../../../services/fields";
import AdminLayout from "../layouts/admin-layout.astro";

const { form } = Astro.params;
const tableConfigRecord = apiConfig.find((t) => t.route === form);

// const definitionObject = tableConfig.definition;

// // Convert the nested objects to an array
// const definitionArray = Object.values(definitionObject);

// const fields = Object.entries(tableConfig.fields);

// const formFields = definitionArray.map((field) => {
//   const key = field.config.name;
//   const fieldOverride = tableConfig.fields[key];
//   if (fieldOverride) {
//     return { key, type: fieldOverride };
//   } else {
//     return { key, type: "textField" };
//   }
// });
const tableConfig = getFieldDefinitions(tableConfigRecord);

if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    var object = {};
    formData.forEach((value, key) => {
      // Reflect.has in favor of: object.hasOwnProperty(key)
      if (!Reflect.has(object, key)) {
        object[key] = value;
        return;
      }
      if (!Array.isArray(object[key])) {
        object[key] = [object[key]];
      }
      object[key].push(value);
    });
    var json = JSON.stringify(object);

    //now post to our own post api
    // const email = data.get("email");
    // const password = data.get("password");
    const baseURl = Astro.request.url.split("/admin/")[0];
    const postUrl = `${baseURl}/api/v1/${tableConfigRecord.route}`;
    try {
      const response = await fetch(postUrl, {
        method: "POST",
        body: json,
      });

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const result = await response.json();
      console.log("Success:", result);
    } catch (error) {
      console.error("Error:", error);
    }

    // Do something with the data
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  } finally {
    return Astro.redirect(`/admin/tables/${tableConfigRecord.route}`);
  }
}
---

<AdminLayout title=`SonicJs Admin` | {form} `>
  <!--
  This example requires some changes to your config:
  
  ```
  // tailwind.config.js
  module.exports = {
    // ...
    plugins: [
      // ...
      require('@tailwindcss/forms'),
    ],
  }
  ```
-->

  <form method="post">
    <div class="space-y-12 mx-auto max-w-7xl">
      <div class="border-b border-white/10 pb-12">
        <h2 class="text-base font-semibold leading-7 text-white">
          New {tableConfigRecord.name}
        </h2>

        <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
          {
            tableConfig.formFields.map((field) => (
              // <div>
              //   <label for={field.name}>{field.label}</label>
              //   <input type="text" id={field.name} name={field.name} />
              // </div>
              <div class="sm:col-span-4">
                <label
                  for={field.key}
                  class="block text-sm font-medium leading-6 text-white"
                >
                  {field.key}
                </label>
                <div class="mt-2">
                  <div class="flex rounded-md bg-white/5 ring-1 ring-inset ring-white/10 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-500">
                    <input
                      type="text"
                      name={field.key}
                      id={field.key}
                      class="flex-1 border-0 bg-transparent py-1.5 pl-1 text-white focus:ring-0 sm:text-sm sm:leading-6"
                      placeholder=""
                    />
                  </div>
                </div>
              </div>
            ))
          }

          <!-- <div class="sm:col-span-4">
            <label
              for="username"
              class="block text-sm font-medium leading-6 text-white"
              >Username</label
            >
            <div class="mt-2">
              <div
                class="flex rounded-md bg-white/5 ring-1 ring-inset ring-white/10 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-500"
              >
                <span
                  class="flex select-none items-center pl-3 text-gray-500 sm:text-sm"
                  >workcation.com/</span
                >
                <input
                  type="text"
                  name="username"
                  id="username"
                  autocomplete="username"
                  class="flex-1 border-0 bg-transparent py-1.5 pl-1 text-white focus:ring-0 sm:text-sm sm:leading-6"
                  placeholder="janesmith"
                />
              </div>
            </div>
          </div>

          <div class="col-span-full">
            <label
              for="about"
              class="block text-sm font-medium leading-6 text-white"
              >About</label
            >
            <div class="mt-2">
              <textarea
                id="about"
                name="about"
                rows="3"
                class="block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6"
              ></textarea>
            </div>
            <p class="mt-3 text-sm leading-6 text-gray-400">
              Write a few sentences about yourself.
            </p>
          </div> -->
        </div>

        <div class="mt-6 flex items-center justify-end gap-x-6">
          <button
            type="button"
            class="text-sm font-semibold leading-6 text-white">Cancel</button
          >
          <button
            type="submit"
            class="rounded-md bg-indigo-500 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500"
            >Save</button
          >
        </div>
      </div>
    </div>
  </form></AdminLayout
>
